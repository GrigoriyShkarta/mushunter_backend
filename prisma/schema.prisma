generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Likes {
  id           Int  @id @default(autoincrement())
  likerUserId  Int?
  likerGroupId Int?
  likedUserId  Int?
  likedGroupId Int?

  likerUser  User?  @relation("LikesGivenByUser", fields: [likerUserId], references: [id])
  likerGroup Group? @relation("LikesGivenByGroup", fields: [likerGroupId], references: [id])
  likedUser  User?  @relation("LikesReceivedByUser", fields: [likedUserId], references: [id])
  likedGroup Group? @relation("LikesReceivedByGroup", fields: [likedGroupId], references: [id])

  @@unique([likerUserId, likedUserId])
  @@unique([likerUserId, likedGroupId])
  @@unique([likerGroupId, likedUserId])
  @@unique([likerGroupId, likedGroupId])
}

model User {
  id                   Int                    @id @default(autoincrement())
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @updatedAt @map("updated_at")
  email                String                 @unique
  firstname            String
  lastname             String
  birthday             DateTime?
  description          String?
  education            String?
  likes                Int                    @default(0)
  phone                String?
  cityId               Int?
  city                 City?                  @relation(fields: [cityId], references: [id])
  skills               UserSkill[]
  links                String[]               @default([])
  styles               UserStyle[]
  likesGiven           Likes[]                @relation("LikesGivenByUser")
  likesReceived        Likes[]                @relation("LikesReceivedByUser")
  groupMemberships     GroupMember[]
  isLookingForBand     Boolean                @default(false)
  stylesLookingForBand Int[]                  @default([])
  position             Int?
  descriptionPosition  String?
  lookingForSkills     UserSkillRequirement[]
  avatar               String?
  groups               Group[]                @relation("GroupMembership")
}

model Group {
  id               Int                     @id @default(autoincrement())
  createdAt        DateTime                @default(now()) @map("created_at")
  updatedAt        DateTime                @updatedAt @map("updated_at")
  name             String
  birthday         DateTime?
  description      String?
  likes            Int                     @default(0)
  cityId           Int?
  city             City?                   @relation(fields: [cityId], references: [id])
  links            String[]                @default([])
  styles           UserStyle[]
  likesGiven       Likes[]                 @relation("LikesGivenByGroup")
  likesReceived    Likes[]                 @relation("LikesReceivedByGroup")
  members          GroupMember[]
  lookingForSkills GroupSkillRequirement[]
  avatar           String?
  creatorId        Int
  creator          User                    @relation("GroupMembership", fields: [creatorId], references: [id])
}

model GroupMember {
  id      Int   @id @default(autoincrement())
  userId  Int
  user    User  @relation(fields: [userId], references: [id])
  groupId Int
  group   Group @relation(fields: [groupId], references: [id])
  role    Int[]

  @@unique([userId, groupId])
}

model UserSkillRequirement {
  id          Int     @id @default(autoincrement())
  userId      Int
  skillId     Int
  styleIds    Int[]   @default([])
  experience  Int
  age         Int?
  description String?
  user        User    @relation(fields: [userId], references: [id])
  skill       Skill   @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId])
}

model GroupSkillRequirement {
  id          Int     @id @default(autoincrement())
  groupId     Int
  skillId     Int
  styleIds    Int[]   @default([])
  experience  Int
  age         Int?
  description String?
  group       Group   @relation(fields: [groupId], references: [id])
  skill       Skill   @relation(fields: [skillId], references: [id])

  @@unique([groupId, skillId])
}

model UserSkill {
  id          Int     @id @default(autoincrement())
  userId      Int
  skillId     Int
  styleIds    Int[]
  experience  Int
  description String?
  user        User    @relation(fields: [userId], references: [id])
  skill       Skill   @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId])
}

model UserStyle {
  id      Int    @id @default(autoincrement())
  userId  Int?
  user    User?  @relation(fields: [userId], references: [id])
  styleId Int?
  style   Style? @relation(fields: [styleId], references: [id])
  groupId Int?
  group   Group? @relation(fields: [groupId], references: [id])
}

model Skill {
  id                    Int                     @id @default(autoincrement())
  name                  String
  users                 UserSkill[]
  UserSkillRequirement  UserSkillRequirement[]
  GroupSkillRequirement GroupSkillRequirement[]
}

model City {
  id     Int     @id @default(autoincrement())
  name   String
  users  User[]
  groups Group[]
}

model Style {
  id    Int         @id @default(autoincrement())
  name  String      @unique
  users UserStyle[]
}

model Age {
  id   Int    @id
  name String
}
